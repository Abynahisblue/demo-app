name: Build and Deploy Java App to ECR

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: eu-central-1
  ECR_REPOSITORY: sandrakumi-javaapp

jobs:
  test:
    runs-on: ubuntu-latest
    name: Run Tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Run tests
        run: mvn clean test --no-transfer-progress

      - name: Generate test report
        run: mvn surefire-report:report --no-transfer-progress
        if: always()

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: test
    name: Build and Push to ECR
    if: github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR Private
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Create ECR repository if it doesn't exist
        run: |
          echo "üèóÔ∏è Ensuring ECR repository exists..."
          aws ecr describe-repositories --repository-names $ECR_REPOSITORY --region $AWS_REGION 2>/dev/null || \
          aws ecr create-repository --repository-name $ECR_REPOSITORY --region $AWS_REGION
          echo "‚úÖ Repository ready"

      - name: Build application
        run: |
          echo "üî® Building Java application..."
          mvn clean package -DskipTests --no-transfer-progress
          echo "‚úÖ Build completed successfully"

      - name: Build, tag, and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          BRANCH_NAME: ${{ github.ref_name }}
        run: |
          echo "üê≥ Building Docker image..."

          # Build Docker image once
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .

          # Tag the same image with different tags
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$BRANCH_NAME

          echo "üì§ Pushing images to ECR..."

          # Push all tags
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$BRANCH_NAME

          echo "‚úÖ Images pushed successfully!"
          echo ""
          echo "üîó Image URIs:"
          echo "   - $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          echo "   - $ECR_REGISTRY/$ECR_REPOSITORY:latest"
          echo "   - $ECR_REGISTRY/$ECR_REPOSITORY:$BRANCH_NAME"

      - name: Test Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "üß™ Testing Docker image..."
          
          # Run container in detached mode with health check
          docker run -d --name test-container -p 8080:8080 $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          
          # Wait for container to start and check if it's running
          echo "Waiting for container to start..."
          sleep 10
          
          # Check container status
          if ! docker ps | grep test-container; then
            echo "‚ùå Container failed to start!"
            echo "Container logs:"
            docker logs test-container
            docker rm test-container
            exit 1
          fi
          
          # Wait longer for Spring Boot to fully initialize
          echo "Waiting for Spring Boot to initialize..."
          sleep 45
          
          # Function to test endpoints with retries
          test_endpoint() {
            local url=$1
            local max_attempts=5
            local attempt=1
          
            while [ $attempt -le $max_attempts ]; do
              echo "Testing $url (attempt $attempt/$max_attempts)..."
              if curl -f --max-time 10 --connect-timeout 5 "$url"; then
                echo "‚úÖ $url responded successfully"
                return 0
              else
                echo "‚ö†Ô∏è Attempt $attempt failed for $url"
                if [ $attempt -eq $max_attempts ]; then
                  echo "‚ùå All attempts failed for $url"
                  echo "Container logs:"
                  docker logs test-container
                  return 1
                fi
                sleep 5
                attempt=$((attempt + 1))
              fi
            done
          }
          
          # Test endpoints with retries
          test_endpoint "http://localhost:8080/" || exit 1
          test_endpoint "http://localhost:8080/health" || exit 1
          test_endpoint "http://localhost:8080/api/info" || exit 1
          
          # Cleanup
          docker stop test-container
          docker rm test-container
          
          echo "‚úÖ All tests passed!"

      - name: Image vulnerability scan
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "üîç Scanning image for vulnerabilities..."
          
          # Install Trivy
          sudo apt-get update
          sudo apt-get install wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy
          
          # Scan image
          trivy image --exit-code 0 --severity HIGH,CRITICAL $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          
          echo "üîí Security scan completed"
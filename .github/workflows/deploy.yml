name: Build and Deploy Java App to ECR

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: sandrakumi-javaapp  # üîÑ REPLACE WITH YOUR NAME

jobs:
  test:
    runs-on: ubuntu-latest
    name: Run Tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Run tests
        run: mvn clean test --no-transfer-progress

      - name: Generate test report
        run: mvn surefire-report:report --no-transfer-progress
        if: always()

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: test
    name: Build and Push to ECR
    if: github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR Public
        id: login-ecr-public
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public

      - name: Build application
        run: |
          echo "üî® Building Java application..."
          mvn clean package -DskipTests --no-transfer-progress
          echo "‚úÖ Build completed successfully"

      - name: Build, tag, and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr-public.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          BRANCH_NAME: ${{ github.ref_name }}
        run: |
          echo "üê≥ Building Docker image..."
          
          # Build Docker image with multiple tags
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$BRANCH_NAME .
          
          echo "üì§ Pushing images to ECR..."
          
          # Push all tags
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$BRANCH_NAME
          
          echo "‚úÖ Images pushed successfully!"
          echo ""
          echo "üîó Image URIs:"
          echo "   - $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          echo "   - $ECR_REGISTRY/$ECR_REPOSITORY:latest"
          echo "   - $ECR_REGISTRY/$ECR_REPOSITORY:$BRANCH_NAME"

      - name: Test Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr-public.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "üß™ Testing Docker image..."
          
          # Run container in detached mode
          docker run -d --name test-container -p 8080:8080 $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          
          # Wait for container to start
          sleep 10
          
          # Test endpoints
          echo "Testing root endpoint..."
          curl -f http://localhost:8080/ || exit 1
          
          echo "Testing health endpoint..."
          curl -f http://localhost:8080/health || exit 1
          
          echo "Testing info endpoint..."
          curl -f http://localhost:8080/api/info || exit 1
          
          # Cleanup
          docker stop test-container
          docker rm test-container
          
          echo "‚úÖ All tests passed!"

      - name: Image vulnerability scan
        env:
          ECR_REGISTRY: ${{ steps.login-ecr-public.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "üîç Scanning image for vulnerabilities..."
          
          # Install Trivy
          sudo apt-get update
          sudo apt-get install wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy
          
          # Scan image
          trivy image --exit-code 0 --severity HIGH,CRITICAL $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          
          echo "üîí Security scan completed"
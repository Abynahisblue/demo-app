
name: Build and Deploy Java App to ECR Public

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  # CHANGE 1: Use the us-east-1 region for ECR Public operations
  AWS_REGION: us-east-1
  ECR_REPOSITORY: sandrakumi-javaapp
  # CHANGE 2: Add your unique ECR Public alias here.
  # You can get this from the Amazon ECR Public Gallery console.
  ECR_PUBLIC_ALIAS: abynah1 # <-- REPLACE WITH YOUR ALIAS

jobs:
  test:
    runs-on: ubuntu-latest
    name: Run Tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Run tests
        run: mvn clean test --no-transfer-progress

      - name: Generate test report
        run: mvn surefire-report:report --no-transfer-progress
        if: always()

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: test
    name: Build and Push to ECR Public
    if: github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # CHANGE 3: Login to ECR Public instead of Private
      - name: Login to Amazon ECR Public
        id: login-ecr-public
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public

      # CHANGE 4: Use 'aws ecr-public' commands to create the public repository
      - name: Create ECR Public repository if it doesn't exist
        run: |
          echo "üèóÔ∏è Ensuring ECR Public repository exists..."
          aws ecr-public describe-repositories --repository-names $ECR_REPOSITORY --region $AWS_REGION 2>/dev/null || \
          aws ecr-public create-repository --repository-name $ECR_REPOSITORY --region $AWS_REGION
          echo "‚úÖ Repository ready"

      - name: Build application
        run: |
          echo "üî® Building Java application..."
          mvn clean package -DskipTests --no-transfer-progress
          echo "‚úÖ Build completed successfully"

      # CHANGE 5: Build and push using the ECR Public URI format
      - name: Build, tag, and push Docker image to ECR Public
        env:
          # Define the full public image name
          IMAGE_NAME: ${{ steps.login-ecr-public.outputs.registry }}/${{ env.ECR_PUBLIC_ALIAS }}/${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
          BRANCH_NAME: ${{ github.ref_name }}
        run: |
          echo "üê≥ Building Docker image for public repository..."

          # Build Docker image once
          docker build -t $IMAGE_NAME:$IMAGE_TAG .

          # Tag the same image with different tags
          docker tag $IMAGE_NAME:$IMAGE_TAG $IMAGE_NAME:latest
          docker tag $IMAGE_NAME:$IMAGE_TAG $IMAGE_NAME:$BRANCH_NAME

          echo "üì§ Pushing images to ECR Public..."

          # Push all tags
          docker push $IMAGE_NAME:$IMAGE_TAG
          docker push $IMAGE_NAME:latest
          docker push $IMAGE_NAME:$BRANCH_NAME

          echo "‚úÖ Images pushed successfully!"
          echo ""
          echo "üîó Public Image URIs:"
          echo "   - $IMAGE_NAME:$IMAGE_TAG"
          echo "   - $IMAGE_NAME:latest"
          echo "   - $IMAGE_NAME:$BRANCH_NAME"
          echo ""
          echo "View your public repository at:"
          echo "https://gallery.ecr.aws/${{ env.ECR_PUBLIC_ALIAS }}/"

      # CHANGE 6: Update the Test step to use the correct public image name
      - name: Test Docker image
        env:
          IMAGE_NAME: public.ecr.aws/${{ env.ECR_PUBLIC_ALIAS }}/${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "üß™ Testing Docker image..."
          
          docker run -d --name test-container -p 8080:8080 $IMAGE_NAME:$IMAGE_TAG
          
          echo "‚è≥ Waiting for the application to become healthy..."
          # (The rest of the test script remains the same)
          end_time=$(( $(date +%s) + 120 ))
          while true; do
            if ! docker ps -f name=test-container --format '{{.Names}}' | grep -q test-container; then
              echo "‚ùå Container has stopped running unexpectedly."
              echo "Container logs:"
              docker logs test-container
              exit 1
            fi
            curl_exit_code=0
            curl -s --fail http://localhost:8080/health > /dev/null || curl_exit_code=$?
            if [ $curl_exit_code -eq 0 ]; then
              echo "‚úÖ Application is healthy and responding."
              break
            fi
            if [ $(date +%s) -gt $end_time ]; then
              echo "‚ùå Timeout: Application did not become healthy within 2 minutes."
              echo "   Last curl exit code: $curl_exit_code"
              echo "Container logs:"
              docker logs test-container
              exit 1
            fi
            echo "   - Application not ready yet (curl exit code: $curl_exit_code). Retrying in 5 seconds..."
            sleep 5
          done
          echo "‚úÖ All tests passed!"
          echo "üßπ Cleaning up test container..."
          docker stop test-container
          docker rm test-container

      # CHANGE 7: Update the Vulnerability Scan step to use the correct public image name
      - name: Image vulnerability scan
        env:
          IMAGE_NAME: public.ecr.aws/${{ env.ECR_PUBLIC_ALIAS }}/${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "üîç Scanning image for vulnerabilities..."
          
          sudo apt-get update
          sudo apt-get install wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy
          
          # Scan public image
          trivy image --exit-code 0 --severity HIGH,CRITICAL $IMAGE_NAME:$IMAGE_TAG
          
          echo "üîí Security scan completed"
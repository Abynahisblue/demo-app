name: Build and Deploy Java App to ECR

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: sandrakumi-javaapp  # üîÑ REPLACE WITH YOUR NAME

jobs:
  test:
    runs-on: ubuntu-latest
    name: Run Tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Run tests
        run: mvn clean test --no-transfer-progress

      - name: Generate test report
        run: mvn surefire-report:report --no-transfer-progress
        if: always()

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: test
    name: Build and Push to ECR
    if: github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR Public
        id: login-ecr-public
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public

      - name: Build application
        run: |
          echo "üî® Building Java application..."
          mvn clean package -DskipTests --no-transfer-progress
          echo "‚úÖ Build completed successfully"

      - name: Build, tag, and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr-public.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          BRANCH_NAME: ${{ github.ref_name }}
        run: |
          echo "üê≥ Building Docker image..."
          
          # Build Docker image with multiple tags
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$BRANCH_NAME .
          
          echo "üì§ Pushing images to ECR..."
          
          # Push all tags
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$BRANCH_NAME
          
          echo "‚úÖ Images pushed successfully!"
          echo ""
          echo "üîó Image URIs:"
          echo "   - $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          echo "   - $ECR_REGISTRY/$ECR_REPOSITORY:latest"
          echo "   - $ECR_REGISTRY/$ECR_REPOSITORY:$BRANCH_NAME"

      - name: Test Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr-public.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "üß™ Testing Docker image..."
          
          # Run container in detached mode
          docker run -d --name test-container -p 8080:8080 $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          
          # Wait for container to start and check if it's running
          echo "Waiting for container to start..."
          sleep 15
          
          # Check if container is still running
          if ! docker ps | grep test-container; then
            echo "‚ùå Container failed to start or exited"
            echo "Container logs:"
            docker logs test-container
            exit 1
          fi
          
          # Wait for application to be ready with retry logic
          echo "Checking application readiness..."
          max_attempts=30
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            echo "Attempt $attempt/$max_attempts: Testing connection..."
          
            if curl -s -f --max-time 10 http://localhost:8080/ > /dev/null 2>&1; then
              echo "‚úÖ Application is responding!"
              break
            fi
          
            if [ $attempt -eq $max_attempts ]; then
              echo "‚ùå Application failed to respond after $max_attempts attempts"
              echo "Container logs:"
              docker logs test-container
              docker stop test-container
              docker rm test-container
              exit 1
            fi
          
            echo "Application not ready yet, waiting 5 seconds..."
            sleep 5
            attempt=$((attempt + 1))
          done
          
          # Test basic endpoints (only test what actually exists)
          echo "Testing root endpoint..."
          response=$(curl -s -w "%{http_code}" http://localhost:8080/)
          http_code="${response: -3}"
          
          if [ "$http_code" -ge 200 ] && [ "$http_code" -lt 400 ]; then
            echo "‚úÖ Root endpoint test passed (HTTP $http_code)"
          else
            echo "‚ùå Root endpoint test failed (HTTP $http_code)"
            echo "Response: ${response%???}"
            docker logs test-container
            docker stop test-container
            docker rm test-container
            exit 1
          fi
          
          # Test additional endpoints only if they exist
          echo "Testing for additional endpoints..."
          
          # Test health endpoint if it exists
          health_response=$(curl -s -w "%{http_code}" http://localhost:8080/health 2>/dev/null || echo "000")
          health_code="${health_response: -3}"
          
          if [ "$health_code" -ge 200 ] && [ "$health_code" -lt 400 ]; then
            echo "‚úÖ Health endpoint test passed (HTTP $health_code)"
          elif [ "$health_code" != "404" ]; then
            echo "‚ö†Ô∏è  Health endpoint returned HTTP $health_code (skipping)"
          else
            echo "‚ÑπÔ∏è  Health endpoint not found (skipping)"
          fi
          
          # Test info endpoint if it exists
          info_response=$(curl -s -w "%{http_code}" http://localhost:8080/api/info 2>/dev/null || echo "000")
          info_code="${info_response: -3}"
          
          if [ "$info_code" -ge 200 ] && [ "$info_code" -lt 400 ]; then
            echo "‚úÖ Info endpoint test passed (HTTP $info_code)"
          elif [ "$info_code" != "404" ]; then
            echo "‚ö†Ô∏è  Info endpoint returned HTTP $info_code (skipping)"
          else
            echo "‚ÑπÔ∏è  Info endpoint not found (skipping)"
          fi
          
          # Cleanup
          echo "Cleaning up test container..."
          docker stop test-container
          docker rm test-container
          
          echo "‚úÖ Docker image tests completed successfully!"

      - name: Image vulnerability scan
        env:
          ECR_REGISTRY: ${{ steps.login-ecr-public.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "üîç Scanning image for vulnerabilities..."
          
          # Install Trivy
          sudo apt-get update
          sudo apt-get install wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy
          
          # Scan image
          trivy image --exit-code 0 --severity HIGH,CRITICAL $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          
          echo "üîí Security scan completed"gt